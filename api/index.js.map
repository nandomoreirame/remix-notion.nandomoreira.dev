{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "/Users/nandomoreira/Dev/projects/remix-notion.nandomoreira.dev/app/root.tsx", "../app/ui/views/RootView.tsx", "../app/ui/components/PageMenu.tsx", "../app/ui/components/SocialLinks.tsx", "../app/ui/components/Hero.tsx", "../app/ui/components/Avatar.tsx", "../app/ui/components/Loading.tsx", "../app/ui/components/PageHeader.tsx", "../app/ui/layouts/Blank.tsx", "../app/ui/layouts/Default.tsx", "../app/ui/layouts/Error.tsx", "../app/ui/views/CatchBoundary.tsx", "/Users/nandomoreira/Dev/projects/remix-notion.nandomoreira.dev/app/routes/$slug.tsx", "../app/services/Notion.ts", "../app/services/api.ts", "../app/presenters/utils.ts", "../app/presenters/contents.ts", "../app/presenters/navigations.tsx", "/Users/nandomoreira/Dev/projects/remix-notion.nandomoreira.dev/app/routes/index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import { renderToString } from 'react-dom/server';\nimport { RemixServer } from '@remix-run/react';\nimport type { EntryContext } from 'remix';\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  let markup = renderToString(<RemixServer context={remixContext} url={request.url} />);\n\n  responseHeaders.set('Content-Type', 'text/html');\n\n  return new Response('<!DOCTYPE html>' + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { MetaFunction } from '@remix-run/node';\nimport { CatchBoundary as ErrorsBoundaryView, RootApp as RootAppView } from './ui/views';\n\nimport rootStyles from './ui/styles/css/root.css';\nimport globalsStyles from './ui/styles/css/globals.css';\nimport { useCatch } from '@remix-run/react';\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'New Remix App',\n  description: '...',\n  viewport: 'width=device-width,initial-scale=1',\n});\n\nexport const links: LinksFunction = () => {\n  return [\n    {\n      rel: 'preconnect',\n      href: 'https://fonts.googleapis.com',\n    },\n    {\n      rel: 'preconnect',\n      href: 'https://fonts.gstatic.com',\n      crossOrigin: 'true',\n    },\n    {\n      rel: 'stylesheet',\n      href: 'https://fonts.googleapis.com/css2?family=Montserrat:wght@700;800&display=swap',\n    },\n    {\n      rel: 'stylesheet',\n      href: rootStyles,\n    },\n    {\n      rel: 'stylesheet',\n      href: globalsStyles,\n    },\n  ];\n};\n\n// export async function loader() {}\n\nexport function ErrorBoundary({ error }) {\n  console.error({ error });\n  return <ErrorsBoundaryView status={'500'} text={error?.message || 'An error happened here!'} />;\n}\n\nexport function CatchBoundary() {\n  const caught = useCatch();\n  return <ErrorsBoundaryView status={caught.status} text={caught.statusText} />;\n}\n\nexport default function App() {\n  return <RootAppView />;\n}\n", "import { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration, useTransition } from '@remix-run/react';\nimport { Loading } from '~/ui/components';\nimport { DefaultLayout } from '../layouts';\n\nconst MENU_LINKS = [\n  {\n    title: 'Home',\n    path: '/',\n  },\n  {\n    title: 'Sobre',\n    path: '/sobre-mim',\n  },\n  {\n    title: 'Projetos',\n    path: '/projetos',\n  },\n  {\n    title: 'Portfolio',\n    path: '/portfolio',\n  },\n  {\n    title: 'Contato',\n    path: '/contato',\n  },\n];\n\nexport function RootApp() {\n  const [loading, setLoading] = React.useState(false);\n  const transition = useTransition();\n\n  React.useEffect(() => {\n    setLoading(transition?.state === 'loading');\n  }, [transition]);\n\n  return (\n    <html lang=\"pt-br\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <DefaultLayout menuLinks={MENU_LINKS}>\n          <Outlet />\n          <ScrollRestoration />\n        </DefaultLayout>\n        {loading && <Loading />}\n        <Scripts />\n        {process.env.NODE_ENV === 'development' && <LiveReload />}\n      </body>\n    </html>\n  );\n}\n", "import { NavLink } from '@remix-run/react';\nimport * as React from 'react';\n\nexport interface PageMenuLink {\n  title: string;\n  path: string;\n  slug?: string;\n}\n\nexport interface PageMenuProps {\n  links?: PageMenuLink[];\n}\n\nexport function PageMenu({ links = [] }: PageMenuProps): React.ReactElement {\n  return (\n    <nav className=\"pageMenu\">\n      {links.length > 0 &&\n        links.map(({ title, path }, k) => (\n          <NavLink key={k} className=\"pageMenu__link\" to={`${path}`}>\n            {title}\n          </NavLink>\n        ))}\n    </nav>\n  );\n}\n", "import * as React from 'react';\n\nexport interface SocialLink {\n  icon: JSX.Element;\n  id: string;\n  label: string;\n  slug: string;\n  url: string;\n}\n\nexport interface SocialLinksProps {\n  links?: SocialLink[];\n}\n\nexport function SocialLinks({ links = [] }: SocialLinksProps): React.ReactElement {\n  return (\n    <ul className=\"socialLinks\">\n      {links.length > 0 &&\n        links.map(({ label, icon, id, url }) => (\n          <li key={id} className=\"socialLinks__item\">\n            <a target=\"_blank\" href={url} rel=\"noreferrer\" className=\"socialLinks__link\" title={`ir para ${label}`}>\n              {icon}\n            </a>\n          </li>\n        ))}\n    </ul>\n  );\n}\n", "import * as React from 'react';\nimport type { User } from '~/types';\nimport { Avatar } from './Avatar';\nimport type { SocialLink } from './SocialLinks';\nimport { SocialLinks } from './SocialLinks';\n\nexport interface HeroProps {\n  content: string;\n  user: User;\n  socialLinks?: SocialLink[];\n}\n\nexport function Hero({ user, content, socialLinks }: HeroProps): React.ReactElement {\n  return (\n    <div className=\"hero container\">\n      <div className=\"hero__inner\">\n        <div className=\"hero__image\">\n          <Avatar image={user.avatar_url} alt={`Avatar de ${user.name}`} size={220} circle />\n        </div>\n        <div>\n          <div className=\"hero__content\" dangerouslySetInnerHTML={{ __html: content }} />\n          {socialLinks && <SocialLinks links={socialLinks} />}\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import * as React from 'react';\n\nexport interface AvatarProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  image: string;\n  alt?: string;\n  size?: string | number;\n  circle?: boolean;\n}\n\nexport function Avatar({\n  image,\n  alt = 'Avatar',\n  size = 200,\n  circle = false,\n  ...imgProps\n}: AvatarProps): React.ReactElement {\n  return (\n    <div\n      className={`avatar ${circle ? '--circle' : '--square'}`}\n      style={{\n        flex: `0 0 ${size}px`,\n        height: `${size}px`,\n        width: `${size}px`,\n      }}\n    >\n      <img className=\"avatar__image\" src={image} alt={alt} width={size} height={size} {...imgProps} />\n    </div>\n  );\n}\n", "import * as React from 'react';\n\nexport function Loading(): React.ReactElement {\n  return (\n    <div className=\"loading\">\n      <div>\n        <span />\n        <span />\n        <span />\n        <span />\n      </div>\n    </div>\n  );\n}\n", "import * as React from 'react';\n\nexport interface PageHeaderProps {\n  title: React.ReactNode | string;\n  description?: React.ReactNode | string;\n  cover: string;\n}\n\nexport function PageHeader({ title, description, cover }: PageHeaderProps): React.ReactElement {\n  return (\n    <header className=\"pageHeader\">\n      <div className=\"pageHeader__inner container --small\">\n        <h1 className=\"pageHeader__title\">{title}</h1>\n        {description && <p className=\"pageHeader__description\">{description}</p>}\n      </div>\n      {cover && <div className=\"pageHeader__image\" style={{ backgroundImage: `url(\"${cover}\")` }} />}\n    </header>\n  );\n}\n", "import * as React from 'react';\n\nexport interface BlankLayoutProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n}\n\nexport function BlankLayout({ children, ...props }: BlankLayoutProps): React.ReactElement {\n  return <main {...props}>{children}</main>;\n}\n", "import { NavLink } from '@remix-run/react';\nimport * as React from 'react';\nimport type { PageMenuLink } from '~/ui/components';\nimport { PageMenu } from '~/ui/components';\nimport { BlankLayout } from './Blank';\n\nexport interface DefaultLayoutProps {\n  children: React.ReactNode;\n  menuLinks?: PageMenuLink[];\n}\n\nexport function DefaultLayout({ children, menuLinks }: DefaultLayoutProps): React.ReactElement {\n  return (\n    <BlankLayout className=\"mainLayout\">\n      <header className=\"header\">\n        <div className=\"header__inner container\">\n          <NavLink className=\"header__logo\" to=\"/\" end>\n            nando<span>moreira</span>\n          </NavLink>\n          {menuLinks && <PageMenu links={menuLinks} />}\n        </div>\n      </header>\n      {children}\n    </BlankLayout>\n  );\n}\n", "import * as React from 'react';\nimport { BlankLayout } from './Blank';\n\nexport interface ErrorLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function ErrorLayout({ children }: ErrorLayoutProps): React.ReactElement {\n  return (\n    <BlankLayout className=\"pageErrors\">\n      <div className=\"pageErrors__inner\">{children}</div>\n    </BlankLayout>\n  );\n}\n", "import { Links, Meta, NavLink, Scripts } from '@remix-run/react';\nimport { ErrorLayout } from '../layouts';\n\nexport interface CatchBoundaryProps {\n  status: string;\n  text: string;\n}\n\nexport function CatchBoundary({ status, text }: CatchBoundaryProps) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>\n          Oops! {status} {text}\n        </title>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <ErrorLayout>\n          <h1 className=\"pageErrors__title\">{status}</h1>\n          <p className=\"pageErrors__description\">{text}</p>\n          <NavLink to=\"/\" className=\"pageErrors__button\" end>\n            \uD83C\uDFE1 &nbsp; Ir para home!\n          </NavLink>\n        </ErrorLayout>\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n", "import * as React from 'react';\nimport type { LoaderSubmission } from '@remix-run/react/transition';\nimport { useLoaderData } from '@remix-run/react';\nimport { marked } from 'marked';\nimport { api, notionService } from '~/services';\nimport { json } from '@remix-run/node';\nimport type { PageContents } from '~/presenters';\nimport { formatSocialLinks, realUuid, formatMenuLinks, formatPageContents } from '~/presenters';\nimport type { ContentDatabase } from '~/types';\nimport type { PageMenuLink, SocialLink } from '~/ui';\nimport { SocialLinks, Avatar, PageHeader } from '~/ui';\n\nimport pagesStyles from '~/ui/styles/css/pages.css';\n\nexport function links() {\n  return [{ rel: 'stylesheet', href: pagesStyles }];\n}\n\ntype LoaderData = {\n  user: User;\n  page: PageContents;\n  content: string;\n  socialLinks: ContentDatabase[] | null;\n};\n\nexport async function loader({ params }: LoaderSubmission) {\n  const staticPages = await api.getStaticPageLinks();\n\n  const pages = formatMenuLinks<PageMenuLink>(staticPages);\n  const currentPage = pages.filter(page => page?.slug === params?.slug)[0];\n\n  if (!currentPage) {\n    throw new Response('Page not found!', {\n      status: 404,\n      statusText: 'A p\u00E1gina que voc\u00EA est\u00E1 procurando n\u00E3o existe.',\n    });\n  }\n\n  const pageContent: ContentDatabase[] = await api.getStaticPage<ContentDatabase>(currentPage?.slug);\n  const page = formatPageContents(pageContent[0]);\n  const markdown = await notionService.page2markdownString(realUuid(page?.id));\n\n  const users = await notionService.getUsers<User>();\n  const user = users.filter(({ type }) => type === 'person')[0];\n\n  let socialLinks = null;\n  if (page.slug === 'sobre-mim') {\n    socialLinks = await api.getSocialLinks();\n  }\n\n  return json<LoaderData>({\n    user,\n    page,\n    content: marked(markdown),\n    socialLinks,\n  });\n}\n\nexport const meta: MetaFunction = ({ data }) => {\n  if (!data || data?.status) return { title: data?.status || 'Oops!', description: data?.statusText };\n  const { page, user } = data as LoaderData;\n  return { title: `${page.title} \u23BC ${user.name}`, description: page.description };\n};\n\nexport default function () {\n  const { user, page, content, socialLinks } = useLoaderData<LoaderData>();\n\n  return (\n    <>\n      <PageHeader title={page.title} description={page.description} cover={page.cover} />\n      <div className=\"about container --small\">\n        {user && (\n          <div className=\"about__sidebar\">\n            <Avatar image={user.avatar_url} alt={`Avatar de ${user.name}`} size={320} />\n            {socialLinks && <SocialLinks links={formatSocialLinks<SocialLink>(socialLinks)} />}\n          </div>\n        )}\n        <div className=\"mdContent about__content\" dangerouslySetInnerHTML={{ __html: content }} />\n      </div>\n    </>\n  );\n}\n", "import { APIErrorCode, Client as NotionClient } from '@notionhq/client';\nimport type { ListUsersParameters, QueryDatabaseParameters } from '@notionhq/client/build/src/api-endpoints';\nimport { NotionToMarkdown } from 'notion-to-md';\n\nclass NotionService {\n  notion: NotionClient;\n  markdown: NotionToMarkdown;\n\n  constructor() {\n    this.notion = new NotionClient({ auth: process.env.NOTION_ACCESS_TOKEN });\n    this.n2m = new NotionToMarkdown({ notionClient: this.notion });\n  }\n\n  async page2markdownString(pageId: string) {\n    const mdBlocks = await this.n2m.pageToMarkdown(pageId);\n    return this.n2m.toMarkdownString(mdBlocks);\n  }\n\n  async getUsers<T>(params: ListUsersParameters = {}): Promise<Array<T>> {\n    try {\n      const { results } = await this.notion.users.list(params);\n      return results;\n    } catch (error) {\n      if (error.code === APIErrorCode.ObjectNotFound) {\n        //\n        // For example: handle by asking the user to select a different database\n        //\n      } else {\n        // Other error handling code\n        console.error({ error });\n      }\n    }\n  }\n\n  async getDatabaseDataPage<T>(databaseId: string, params: QueryDatabaseParameters = {}): Promise<Array<T>> {\n    try {\n      const { filter, ...restParams } = params;\n\n      let _filter = {\n        property: 'published', // notion database \"published\" property\n        checkbox: {\n          equals: true,\n        },\n      };\n\n      if (filter) {\n        _filter = {\n          and: [_filter, filter],\n        };\n      }\n\n      const { results } = await this.notion.databases.query({\n        database_id: databaseId,\n        filter: _filter,\n        sorts: [\n          {\n            property: 'created', // notion database \"created\" property\n            direction: 'ascending',\n          },\n          {\n            property: 'updated', // notion database \"updated\" property\n            direction: 'ascending',\n          },\n        ],\n        ...restParams,\n      });\n\n      return results;\n    } catch (error) {\n      if (error.code === APIErrorCode.ObjectNotFound) {\n        //\n        // For example: handle by asking the user to select a different database\n        //\n      } else {\n        // Other error handling code\n        console.error({ error });\n      }\n    }\n  }\n}\n\nexport const notionService = new NotionService();\n", "import { notionService } from '~/services';\n\nconst { NOTION_CONTENTS_DATABASE_ID } = process.env;\n\nexport async function getSocialLinks() {\n  return await notionService.getDatabaseDataPage<ContentDatabase>(NOTION_CONTENTS_DATABASE_ID, {\n    filter: {\n      property: 'category', // notion database \"category\" property\n      select: {\n        equals: 'socialLink',\n      },\n    },\n  });\n}\n\nexport async function getStaticPageLinks() {\n  return await notionService.getDatabaseDataPage<ContentDatabase>(NOTION_CONTENTS_DATABASE_ID, {\n    filter: {\n      property: 'category', // notion database \"category\" property\n      select: {\n        equals: 'staticPage',\n      },\n    },\n  });\n}\n\nexport async function getContent<T>() {\n  return await notionService.getDatabaseDataPage<T>(NOTION_CONTENTS_DATABASE_ID, {\n    filter: {\n      property: 'category', // notion database \"category\" property\n      select: {\n        equals: 'content',\n      },\n    },\n  });\n}\n\nexport async function getStaticPage<T>(pageSlug: string) {\n  return await notionService.getDatabaseDataPage<T>(NOTION_CONTENTS_DATABASE_ID, {\n    filter: {\n      property: 'slug',\n      rich_text: {\n        equals: pageSlug,\n      },\n    },\n  });\n}\n", "import slugify from 'slugify';\n\nexport function title2slug(properties): string {\n  const slugTitle = slugify(properties?.title?.title[0]?.plain_text || '', { replacement: '-', lower: true });\n  return properties?.slug?.rich_text[0]?.plain_text || slugTitle;\n}\n\nexport function realUuid(uuid: string): string {\n  return uuid.replace(/-/g, '');\n}\n", "import type { ContentDatabase } from '~/types';\nimport { title2slug } from './utils';\n\nexport interface PageContents {\n  id: string;\n  cover: string;\n  created: string;\n  description: string;\n  slug: string;\n  tags: string[];\n  title: string;\n  updated: string;\n  url: string;\n}\n\nexport function formatPageContents({ id, cover, properties }: ContentDatabase): PageContents {\n  let _cover = cover;\n\n  switch (cover?.type) {\n    case 'file':\n      _cover = cover.file;\n      break;\n    case 'external':\n      _cover = cover.external.url;\n      break;\n    default:\n      _cover = ''; // __ default image here __\n  }\n\n  return {\n    id: id,\n    cover: _cover,\n    created: properties.created.created_time,\n    description: properties.description?.rich_text[0]?.plain_text || '',\n    slug: title2slug(properties),\n    tags: properties.tags?.multi_select,\n    title: properties.title.title[0].plain_text,\n    updated: properties.updated.last_edited_time,\n    url: properties.url?.url || '',\n  };\n}\n", "import type { ContentDatabase } from '~/types';\nimport { realUuid, title2slug } from './utils';\nimport {\n  IoLogoInstagram,\n  IoLogoTwitter,\n  IoLogoGithub,\n  IoLogoWhatsapp,\n  IoLogoCodepen,\n  IoLogoLinkedin,\n  IoLogoDribbble,\n  IoLogoBehance,\n} from 'react-icons/io5';\n\nconst ICONS_DATA = {\n  instagram: <IoLogoInstagram title=\"Instagram\" size={22} />,\n  twitter: <IoLogoTwitter title=\"twitter\" size={22} />,\n  github: <IoLogoGithub title=\"github\" size={22} />,\n  whatsapp: <IoLogoWhatsapp title=\"whatsapp\" size={22} />,\n  linkedin: <IoLogoLinkedin title=\"linkedin\" size={22} />,\n  codepen: <IoLogoCodepen title=\"codepen\" size={22} />,\n  dribbble: <IoLogoDribbble title=\"dribbble\" size={22} />,\n  behance: <IoLogoBehance title=\"behance\" size={22} />,\n};\n\nexport function formatMenuLinks<T>(database: ContentDatabase): T[] {\n  return database.map(({ id, properties }: ContentDatabase) => ({\n    id: realUuid(id),\n    title: properties.title.title[0].plain_text,\n    slug: title2slug(properties),\n  }));\n}\n\nexport function formatSocialLinks<T>(database: ContentDatabase): T[] {\n  return database.map(({ id, properties }: ContentDatabase) => {\n    const slug = title2slug(properties);\n    return {\n      icon: ICONS_DATA[slug],\n      id: realUuid(id),\n      label: properties.title.title[0].plain_text,\n      slug,\n      url: properties.url.url,\n    };\n  });\n}\n", "import { json } from '@remix-run/node';\nimport type { ContentDatabase, User } from '~/types';\nimport { api, notionService } from '~/services';\nimport { formatPageContents, formatSocialLinks, realUuid } from '~/presenters';\nimport { useLoaderData } from '@remix-run/react';\nimport { marked } from 'marked';\nimport type { SocialLink } from '~/ui';\nimport { Hero } from '~/ui';\n\nimport homeStyles from '~/ui/styles/css/home.css';\n\nexport function links() {\n  return [{ rel: 'stylesheet', href: homeStyles }];\n}\n\ntype LoaderData = {\n  content: string;\n  description: string;\n  socialLinks: ContentDatabase[];\n  title: string;\n  user: User;\n};\n\nexport async function loader() {\n  const contentBlock = await api.getContent<ContentDatabase>();\n  const content = contentBlock.filter(\n    ({ properties }: ContentDatabase) => properties.slug?.rich_text[0]?.plain_text === 'hero',\n  );\n  const contentFormated = formatPageContents(content[0]);\n  const markdown = await notionService.page2markdownString(realUuid(contentFormated?.id));\n\n  const users = await notionService.getUsers<User>();\n  const user = users.filter(({ type }) => type === 'person')[0];\n\n  const socialLinks = await api.getSocialLinks();\n\n  // return json(user);\n  return json<LoaderData>({\n    content: marked(markdown),\n    description: contentFormated.description,\n    socialLinks,\n    title: contentFormated.title,\n    user,\n  });\n}\n\nexport const meta: MetaFunction = ({ data }) => {\n  const { title, description } = data as LoaderData;\n  return { title, description };\n};\n\nexport default function () {\n  const { user, content, socialLinks } = useLoaderData<LoaderData>();\n  return <Hero user={user} content={content} socialLinks={formatSocialLinks<SocialLink>(socialLinks)} />;\n}\n", "export default {'version':'e344ed2b','entry':{'module':'/build/entry.client-UIJ7DMHB.js','imports':['/build/_shared/chunk-IFZ4FXHA.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-4HYHHASM.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':true,'hasErrorBoundary':true},'routes/$slug':{'id':'routes/$slug','parentId':'root','path':':slug','index':undefined,'caseSensitive':undefined,'module':'/build/routes/$slug-B3FWFRHS.js','imports':['/build/_shared/chunk-E7Z3FK4O.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-FHX46VSV.js','imports':['/build/_shared/chunk-E7Z3FK4O.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-E344ED2B.js'};", "\nimport * as entryServer from \"/Users/nandomoreira/Dev/projects/remix-notion.nandomoreira.dev/app/entry.server.tsx\";\nimport * as route0 from \"/Users/nandomoreira/Dev/projects/remix-notion.nandomoreira.dev/app/root.tsx\";\nimport * as route1 from \"/Users/nandomoreira/Dev/projects/remix-notion.nandomoreira.dev/app/routes/$slug.tsx\";\nimport * as route2 from \"/Users/nandomoreira/Dev/projects/remix-notion.nandomoreira.dev/app/routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/$slug\": {\n      id: \"routes/$slug\",\n      parentId: \"root\",\n      path: \":slug\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    }\n  };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,YAAuB;;;ACDvB;AAAA;AAAA;AAAA;AAAA,oBAA+B;AAC/B,mBAA4B;AAGb,uBACb,SACA,oBACA,iBACA,cACA;AACA,MAAI,SAAS,kCAAe,oCAAC,0BAAD;AAAA,IAAa,SAAS;AAAA,IAAc,KAAK,QAAQ;AAAA;AAE7E,kBAAgB,IAAI,gBAAgB;AAEpC,SAAO,IAAI,SAAS,oBAAoB,QAAQ;AAAA,IAC9C,QAAQ;AAAA,IACR,SAAS;AAAA;AAAA;;;AChBb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA2F;;;ACA3F,oBAAwB;AACxB,aAAuB;AAYhB,kBAAkB,EAAE,gBAAQ,MAAyC;AAC1E,SACE,qCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACZ,OAAM,SAAS,KACd,OAAM,IAAI,CAAC,EAAE,OAAO,QAAQ,MAC1B,qCAAC,uBAAD;AAAA,IAAS,KAAK;AAAA,IAAG,WAAU;AAAA,IAAiB,IAAI,GAAG;AAAA,KAChD;AAAA;;;ACnBb,aAAuB;AAchB,qBAAqB,EAAE,gBAAQ,MAA4C;AAChF,SACE,qCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KACX,OAAM,SAAS,KACd,OAAM,IAAI,CAAC,EAAE,OAAO,MAAM,IAAI,UAC5B,qCAAC,MAAD;AAAA,IAAI,KAAK;AAAA,IAAI,WAAU;AAAA,KACrB,qCAAC,KAAD;AAAA,IAAG,QAAO;AAAA,IAAS,MAAM;AAAA,IAAK,KAAI;AAAA,IAAa,WAAU;AAAA,IAAoB,OAAO,WAAW;AAAA,KAC5F;AAAA;;;ACrBf,aAAuB;;;ACAvB,aAAuB;AAShB,gBAAgB,IAMa;AANb,eACrB;AAAA;AAAA,IACA,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,MAJY,IAKlB,qBALkB,IAKlB;AAAA,IAJH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAGA,SACE,qCAAC,OAAD;AAAA,IACE,WAAW,UAAU,SAAS,aAAa;AAAA,IAC3C,OAAO;AAAA,MACL,MAAM,OAAO;AAAA,MACb,QAAQ,GAAG;AAAA,MACX,OAAO,GAAG;AAAA;AAAA,KAGZ,qCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,IAAgB,KAAK;AAAA,IAAO;AAAA,IAAU,OAAO;AAAA,IAAM,QAAQ;AAAA,KAAU;AAAA;;;ADbnF,cAAc,EAAE,MAAM,SAAS,eAA8C;AAClF,SACE,qCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,qCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,qCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,qCAAC,QAAD;AAAA,IAAQ,OAAO,KAAK;AAAA,IAAY,KAAK,aAAa,KAAK;AAAA,IAAQ,MAAM;AAAA,IAAK,QAAM;AAAA,OAElF,qCAAC,OAAD,MACE,qCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,IAAgB,yBAAyB,EAAE,QAAQ;AAAA,MACjE,eAAe,qCAAC,aAAD;AAAA,IAAa,OAAO;AAAA;AAAA;;;AErB9C,aAAuB;AAEhB,mBAAuC;AAC5C,SACE,qCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,qCAAC,OAAD,MACE,qCAAC,QAAD,OACA,qCAAC,QAAD,OACA,qCAAC,QAAD,OACA,qCAAC,QAAD;AAAA;;;ACTR,aAAuB;AAQhB,oBAAoB,EAAE,OAAO,aAAa,SAA8C;AAC7F,SACE,qCAAC,UAAD;AAAA,IAAQ,WAAU;AAAA,KAChB,qCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,qCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KAAqB,QAClC,eAAe,qCAAC,KAAD;AAAA,IAAG,WAAU;AAAA,KAA2B,eAEzD,SAAS,qCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,IAAoB,OAAO,EAAE,iBAAiB,QAAQ;AAAA;AAAA;;;ACfrF,aAAuB;AAMhB,qBAAqB,IAA8D;AAA9D,eAAE,eAAF,IAAe,kBAAf,IAAe,CAAb;AAC5B,SAAO,qCAAC,QAAD,mBAAU,QAAQ;AAAA;;;ACP3B,oBAAwB;AACxB,aAAuB;AAUhB,uBAAuB,EAAE,UAAU,aAAqD;AAC7F,SACE,qCAAC,aAAD;AAAA,IAAa,WAAU;AAAA,KACrB,qCAAC,UAAD;AAAA,IAAQ,WAAU;AAAA,KAChB,qCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,qCAAC,uBAAD;AAAA,IAAS,WAAU;AAAA,IAAe,IAAG;AAAA,IAAI,KAAG;AAAA,KAAC,SACtC,qCAAC,QAAD,MAAM,aAEZ,aAAa,qCAAC,UAAD;AAAA,IAAU,OAAO;AAAA,QAGlC;AAAA;;;ACtBP,cAAuB;AAOhB,qBAAqB,EAAE,YAAkD;AAC9E,SACE,sCAAC,aAAD;AAAA,IAAa,WAAU;AAAA,KACrB,sCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KAAqB;AAAA;;;ATN1C,IAAM,aAAa;AAAA,EACjB;AAAA,IACE,OAAO;AAAA,IACP,MAAM;AAAA;AAAA,EAER;AAAA,IACE,OAAO;AAAA,IACP,MAAM;AAAA;AAAA,EAER;AAAA,IACE,OAAO;AAAA,IACP,MAAM;AAAA;AAAA,EAER;AAAA,IACE,OAAO;AAAA,IACP,MAAM;AAAA;AAAA,EAER;AAAA,IACE,OAAO;AAAA,IACP,MAAM;AAAA;AAAA;AAIH,mBAAmB;AACxB,QAAM,CAAC,SAAS,cAAc,MAAM,SAAS;AAC7C,QAAM,aAAa;AAEnB,QAAM,UAAU,MAAM;AACpB,eAAW,0CAAY,WAAU;AAAA,KAChC,CAAC;AAEJ,SACE,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,KACT,oCAAC,QAAD,MACE,oCAAC,oBAAD,OACA,oCAAC,qBAAD,QAEF,oCAAC,QAAD,MACE,oCAAC,eAAD;AAAA,IAAe,WAAW;AAAA,KACxB,oCAAC,sBAAD,OACA,oCAAC,iCAAD,QAED,WAAW,oCAAC,SAAD,OACZ,oCAAC,uBAAD,OAC2C,oCAAC,0BAAD;AAAA;;;AUhDnD,oBAA8C;AAQvC,uBAAuB,EAAE,QAAQ,QAA4B;AAClE,SACE,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,KACT,oCAAC,QAAD,MACE,oCAAC,SAAD,MAAO,UACE,QAAO,KAAE,OAElB,oCAAC,oBAAD,OACA,oCAAC,qBAAD,QAEF,oCAAC,QAAD,MACE,oCAAC,aAAD,MACE,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KAAqB,SACnC,oCAAC,KAAD;AAAA,IAAG,WAAU;AAAA,KAA2B,OACxC,oCAAC,uBAAD;AAAA,IAAS,IAAG;AAAA,IAAI,WAAU;AAAA,IAAqB,KAAG;AAAA,KAAC,kCAIrD,oCAAC,uBAAD;AAAA;;;;;;;;;AXrBR,oBAAyB;AAElB,IAAM,OAAqB,MAAO;AAAA,EACvC,SAAS;AAAA,EACT,OAAO;AAAA,EACP,aAAa;AAAA,EACb,UAAU;AAAA;AAGL,IAAM,QAAuB,MAAM;AACxC,SAAO;AAAA,IACL;AAAA,MACE,KAAK;AAAA,MACL,MAAM;AAAA;AAAA,IAER;AAAA,MACE,KAAK;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA;AAAA,IAEf;AAAA,MACE,KAAK;AAAA,MACL,MAAM;AAAA;AAAA,IAER;AAAA,MACE,KAAK;AAAA,MACL,MAAM;AAAA;AAAA,IAER;AAAA,MACE,KAAK;AAAA,MACL,MAAM;AAAA;AAAA;AAAA;AAOL,uBAAuB,EAAE,SAAS;AACvC,UAAQ,MAAM,EAAE;AAChB,SAAO,oCAAC,eAAD;AAAA,IAAoB,QAAQ;AAAA,IAAO,MAAM,gCAAO,YAAW;AAAA;AAAA;AAG7D,0BAAyB;AAC9B,QAAM,SAAS;AACf,SAAO,oCAAC,eAAD;AAAA,IAAoB,QAAQ,OAAO;AAAA,IAAQ,MAAM,OAAO;AAAA;AAAA;AAGlD,eAAe;AAC5B,SAAO,oCAAC,SAAD;AAAA;;;AYrDT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAuB;AAEvB,oBAA8B;AAC9B,oBAAuB;;;ACHvB,oBAAqD;AAErD,0BAAiC;AAEjC,0BAAoB;AAAA,EAIlB,cAAc;AACZ,SAAK,SAAS,IAAI,qBAAa,EAAE,MAAM,QAAQ,IAAI;AACnD,SAAK,MAAM,IAAI,qCAAiB,EAAE,cAAc,KAAK;AAAA;AAAA,QAGjD,oBAAoB,QAAgB;AACxC,UAAM,WAAW,MAAM,KAAK,IAAI,eAAe;AAC/C,WAAO,KAAK,IAAI,iBAAiB;AAAA;AAAA,QAG7B,SAAY,SAA8B,IAAuB;AACrE,QAAI;AACF,YAAM,EAAE,YAAY,MAAM,KAAK,OAAO,MAAM,KAAK;AACjD,aAAO;AAAA,aACA,OAAP;AACA,UAAI,MAAM,SAAS,2BAAa,gBAAgB;AAAA,aAIzC;AAEL,gBAAQ,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA,QAKhB,oBAAuB,YAAoB,SAAkC,IAAuB;AACxG,QAAI;AACF,YAAkC,aAA1B,aAA0B,IAAf,uBAAe,IAAf,CAAX;AAER,UAAI,UAAU;AAAA,QACZ,UAAU;AAAA,QACV,UAAU;AAAA,UACR,QAAQ;AAAA;AAAA;AAIZ,UAAI,QAAQ;AACV,kBAAU;AAAA,UACR,KAAK,CAAC,SAAS;AAAA;AAAA;AAInB,YAAM,EAAE,YAAY,MAAM,KAAK,OAAO,UAAU,MAAM;AAAA,QACpD,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,OAAO;AAAA,UACL;AAAA,YACE,UAAU;AAAA,YACV,WAAW;AAAA;AAAA,UAEb;AAAA,YACE,UAAU;AAAA,YACV,WAAW;AAAA;AAAA;AAAA,SAGZ;AAGL,aAAO;AAAA,aACA,OAAP;AACA,UAAI,MAAM,SAAS,2BAAa,gBAAgB;AAAA,aAIzC;AAEL,gBAAQ,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAMjB,IAAM,gBAAgB,IAAI;;;ACjFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,IAAM,EAAE,gCAAgC,QAAQ;AAEhD,gCAAuC;AACrC,SAAO,MAAM,cAAc,oBAAqC,6BAA6B;AAAA,IAC3F,QAAQ;AAAA,MACN,UAAU;AAAA,MACV,QAAQ;AAAA,QACN,QAAQ;AAAA;AAAA;AAAA;AAAA;AAMhB,oCAA2C;AACzC,SAAO,MAAM,cAAc,oBAAqC,6BAA6B;AAAA,IAC3F,QAAQ;AAAA,MACN,UAAU;AAAA,MACV,QAAQ;AAAA,QACN,QAAQ;AAAA;AAAA;AAAA;AAAA;AAMhB,4BAAsC;AACpC,SAAO,MAAM,cAAc,oBAAuB,6BAA6B;AAAA,IAC7E,QAAQ;AAAA,MACN,UAAU;AAAA,MACV,QAAQ;AAAA,QACN,QAAQ;AAAA;AAAA;AAAA;AAAA;AAMhB,6BAAuC,UAAkB;AACvD,SAAO,MAAM,cAAc,oBAAuB,6BAA6B;AAAA,IAC7E,QAAQ;AAAA,MACN,UAAU;AAAA,MACV,WAAW;AAAA,QACT,QAAQ;AAAA;AAAA;AAAA;AAAA;;;AFrChB,kBAAqB;;;AGLrB,qBAAoB;AAEb,oBAAoB,YAAoB;AAF/C;AAGE,QAAM,YAAY,4BAAQ,sDAAY,UAAZ,mBAAmB,MAAM,OAAzB,mBAA6B,eAAc,IAAI,EAAE,aAAa,KAAK,OAAO;AACpG,SAAO,sDAAY,SAAZ,mBAAkB,UAAU,OAA5B,mBAAgC,eAAc;AAAA;AAGhD,kBAAkB,MAAsB;AAC7C,SAAO,KAAK,QAAQ,MAAM;AAAA;;;ACOrB,4BAA4B,EAAE,IAAI,OAAO,cAA6C;AAf7F;AAgBE,MAAI,SAAS;AAEb,UAAQ,+BAAO;AAAA,SACR;AACH,eAAS,MAAM;AACf;AAAA,SACG;AACH,eAAS,MAAM,SAAS;AACxB;AAAA;AAEA,eAAS;AAAA;AAGb,SAAO;AAAA,IACL;AAAA,IACA,OAAO;AAAA,IACP,SAAS,WAAW,QAAQ;AAAA,IAC5B,aAAa,wBAAW,gBAAX,mBAAwB,UAAU,OAAlC,mBAAsC,eAAc;AAAA,IACjE,MAAM,WAAW;AAAA,IACjB,MAAM,iBAAW,SAAX,mBAAiB;AAAA,IACvB,OAAO,WAAW,MAAM,MAAM,GAAG;AAAA,IACjC,SAAS,WAAW,QAAQ;AAAA,IAC5B,KAAK,kBAAW,QAAX,mBAAgB,QAAO;AAAA;AAAA;;;ACpChC,iBASO;AAEP,IAAM,aAAa;AAAA,EACjB,WAAW,oCAAC,4BAAD;AAAA,IAAiB,OAAM;AAAA,IAAY,MAAM;AAAA;AAAA,EACpD,SAAS,oCAAC,0BAAD;AAAA,IAAe,OAAM;AAAA,IAAU,MAAM;AAAA;AAAA,EAC9C,QAAQ,oCAAC,yBAAD;AAAA,IAAc,OAAM;AAAA,IAAS,MAAM;AAAA;AAAA,EAC3C,UAAU,oCAAC,2BAAD;AAAA,IAAgB,OAAM;AAAA,IAAW,MAAM;AAAA;AAAA,EACjD,UAAU,oCAAC,2BAAD;AAAA,IAAgB,OAAM;AAAA,IAAW,MAAM;AAAA;AAAA,EACjD,SAAS,oCAAC,0BAAD;AAAA,IAAe,OAAM;AAAA,IAAU,MAAM;AAAA;AAAA,EAC9C,UAAU,oCAAC,2BAAD;AAAA,IAAgB,OAAM;AAAA,IAAW,MAAM;AAAA;AAAA,EACjD,SAAS,oCAAC,0BAAD;AAAA,IAAe,OAAM;AAAA,IAAU,MAAM;AAAA;AAAA;AAGzC,yBAA4B,UAAgC;AACjE,SAAO,SAAS,IAAI,CAAC,EAAE,IAAI,iBAAmC;AAAA,IAC5D,IAAI,SAAS;AAAA,IACb,OAAO,WAAW,MAAM,MAAM,GAAG;AAAA,IACjC,MAAM,WAAW;AAAA;AAAA;AAId,2BAA8B,UAAgC;AACnE,SAAO,SAAS,IAAI,CAAC,EAAE,IAAI,iBAAkC;AAC3D,UAAM,OAAO,WAAW;AACxB,WAAO;AAAA,MACL,MAAM,WAAW;AAAA,MACjB,IAAI,SAAS;AAAA,MACb,OAAO,WAAW,MAAM,MAAM,GAAG;AAAA,MACjC;AAAA,MACA,KAAK,WAAW,IAAI;AAAA;AAAA;AAAA;;;;;;AL1BnB,kBAAiB;AACtB,SAAO,CAAC,EAAE,KAAK,cAAc,MAAM;AAAA;AAUrC,sBAA6B,EAAE,UAA4B;AACzD,QAAM,cAAc,MAAM,YAAI;AAE9B,QAAM,QAAQ,gBAA8B;AAC5C,QAAM,cAAc,MAAM,OAAO,WAAQ,gCAAM,UAAS,kCAAQ,OAAM;AAEtE,MAAI,CAAC,aAAa;AAChB,UAAM,IAAI,SAAS,mBAAmB;AAAA,MACpC,QAAQ;AAAA,MACR,YAAY;AAAA;AAAA;AAIhB,QAAM,cAAiC,MAAM,YAAI,cAA+B,2CAAa;AAC7F,QAAM,OAAO,mBAAmB,YAAY;AAC5C,QAAM,WAAW,MAAM,cAAc,oBAAoB,SAAS,6BAAM;AAExE,QAAM,QAAQ,MAAM,cAAc;AAClC,QAAM,OAAO,MAAM,OAAO,CAAC,EAAE,WAAW,SAAS,UAAU;AAE3D,MAAI,cAAc;AAClB,MAAI,KAAK,SAAS,aAAa;AAC7B,kBAAc,MAAM,YAAI;AAAA;AAG1B,SAAO,sBAAiB;AAAA,IACtB;AAAA,IACA;AAAA,IACA,SAAS,0BAAO;AAAA,IAChB;AAAA;AAAA;AAIG,IAAM,QAAqB,CAAC,EAAE,WAAW;AAC9C,MAAI,CAAC,QAAQ,8BAAM;AAAQ,WAAO,EAAE,OAAO,8BAAM,WAAU,SAAS,aAAa,6BAAM;AACvF,QAAM,EAAE,MAAM,SAAS;AACvB,SAAO,EAAE,OAAO,GAAG,KAAK,gBAAW,KAAK,QAAQ,aAAa,KAAK;AAAA;AAGrD,wBAAY;AACzB,QAAM,EAAE,MAAM,MAAM,SAAS,gBAAgB;AAE7C,SACE,8DACE,sCAAC,YAAD;AAAA,IAAY,OAAO,KAAK;AAAA,IAAO,aAAa,KAAK;AAAA,IAAa,OAAO,KAAK;AAAA,MAC1E,sCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACZ,QACC,sCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,sCAAC,QAAD;AAAA,IAAQ,OAAO,KAAK;AAAA,IAAY,KAAK,aAAa,KAAK;AAAA,IAAQ,MAAM;AAAA,MACpE,eAAe,sCAAC,aAAD;AAAA,IAAa,OAAO,kBAA8B;AAAA,OAGtE,sCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,IAA2B,yBAAyB,EAAE,QAAQ;AAAA;AAAA;;;AM7ErF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAqB;AAIrB,oBAA8B;AAC9B,qBAAuB;;;;;;AAMhB,kBAAiB;AACtB,SAAO,CAAC,EAAE,KAAK,cAAc,MAAM;AAAA;AAWrC,yBAA+B;AAC7B,QAAM,eAAe,MAAM,YAAI;AAC/B,QAAM,UAAU,aAAa,OAC3B,CAAC,EAAE,iBAA+B;AA1BtC;AA0ByC,mCAAW,SAAX,mBAAiB,UAAU,OAA3B,mBAA+B,gBAAe;AAAA;AAErF,QAAM,kBAAkB,mBAAmB,QAAQ;AACnD,QAAM,WAAW,MAAM,cAAc,oBAAoB,SAAS,mDAAiB;AAEnF,QAAM,QAAQ,MAAM,cAAc;AAClC,QAAM,OAAO,MAAM,OAAO,CAAC,EAAE,WAAW,SAAS,UAAU;AAE3D,QAAM,cAAc,MAAM,YAAI;AAG9B,SAAO,uBAAiB;AAAA,IACtB,SAAS,2BAAO;AAAA,IAChB,aAAa,gBAAgB;AAAA,IAC7B;AAAA,IACA,OAAO,gBAAgB;AAAA,IACvB;AAAA;AAAA;AAIG,IAAM,QAAqB,CAAC,EAAE,WAAW;AAC9C,QAAM,EAAE,OAAO,gBAAgB;AAC/B,SAAO,EAAE,OAAO;AAAA;AAGH,0BAAY;AACzB,QAAM,EAAE,MAAM,SAAS,gBAAgB;AACvC,SAAO,oCAAC,MAAD;AAAA,IAAM;AAAA,IAAY;AAAA,IAAkB,aAAa,kBAA8B;AAAA;AAAA;;;ACrDxF,IAAO,0BAAQ,EAAC,WAAU,YAAW,SAAQ,EAAC,UAAS,mCAAkC,WAAU,CAAC,uCAAqC,UAAS,EAAC,QAAO,EAAC,MAAK,QAAO,YAAW,QAAU,QAAO,IAAG,SAAQ,QAAU,iBAAgB,QAAU,UAAS,2BAA0B,WAAU,QAAU,aAAY,OAAM,aAAY,OAAM,oBAAmB,MAAK,oBAAmB,QAAM,gBAAe,EAAC,MAAK,gBAAe,YAAW,QAAO,QAAO,SAAQ,SAAQ,QAAU,iBAAgB,QAAU,UAAS,mCAAkC,WAAU,CAAC,qCAAoC,aAAY,OAAM,aAAY,MAAK,oBAAmB,OAAM,oBAAmB,SAAO,gBAAe,EAAC,MAAK,gBAAe,YAAW,QAAO,QAAO,QAAU,SAAQ,MAAK,iBAAgB,QAAU,UAAS,mCAAkC,WAAU,CAAC,qCAAoC,aAAY,OAAM,aAAY,MAAK,oBAAmB,OAAM,oBAAmB,WAAQ,OAAM;;;ACM37B,IAAM,QAAQ,EAAE,QAAQ;AACxB,IAAM,SAAS;AAAA,EACpB,QAAQ;AAAA,IACN,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,gBAAgB;AAAA,IACZ,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,gBAAgB;AAAA,IACZ,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA;",
  "names": []
}
